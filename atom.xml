<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hiby</title>
  <subtitle>Hi，花花世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hiby.xyz/"/>
  <updated>2016-08-10T02:27:17.000Z</updated>
  <id>https://hiby.xyz/</id>
  
  <author>
    <name>hiby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>babel5-to-babel6</title>
    <link href="https://hiby.xyz/2016/08/10/babel5-to-babel6/"/>
    <id>https://hiby.xyz/2016/08/10/babel5-to-babel6/</id>
    <published>2016-08-09T16:00:00.000Z</published>
    <updated>2016-08-10T02:27:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要升级？"><a href="#为什么要升级？" class="headerlink" title="为什么要升级？"></a>为什么要升级？</h2><ul>
<li>性能提升：据说compile速度提升20%（但测试后发现，速度慢了20%+）。</li>
<li>可配置的插件：更强的灵活性，以及更简单的插件API。</li>
<li>更简洁的配置。</li>
</ul>
<h2 id="重大变化"><a href="#重大变化" class="headerlink" title="重大变化"></a>重大变化</h2><ul>
<li>不再提供babel包<ul>
<li>命令行工具由babel-cli包提供</li>
<li>node api由babel-core提供</li>
<li>polyfill由babel-polyfill提供</li>
</ul>
</li>
<li>.babelrc配置变化<ul>
<li>移除“blacklist”、“whitelist”、“optional”、“nonStandard”和“modules”等</li>
<li>增加<code>plugins</code>：转码逻辑通过一系列插件实现，默认不使用任何插件</li>
<li>增加<code>presets</code>配置，提供一些预设的插件集合</li>
<li>external-helper选项由插件实现</li>
</ul>
</li>
</ul>
<h2 id="升级过程中遇到问题"><a href="#升级过程中遇到问题" class="headerlink" title="升级过程中遇到问题"></a>升级过程中遇到问题</h2><h3 id="babel官方未提供decorator-transfrom插件"><a href="#babel官方未提供decorator-transfrom插件" class="headerlink" title="babel官方未提供decorator transfrom插件"></a>babel官方未提供decorator transfrom插件</h3><p>可以使用非官方插件：transform-decorators-legacy。</p>
<h3 id="babel提供的es2015插件集默认包含transform-es2015-modules-commonjs插件"><a href="#babel提供的es2015插件集默认包含transform-es2015-modules-commonjs插件" class="headerlink" title="babel提供的es2015插件集默认包含transform-es2015-modules-commonjs插件"></a>babel提供的es2015插件集默认包含transform-es2015-modules-commonjs插件</h3><p>SSP系统需要将es6模块转成AMD模块，需要在plugins中指定使用transform-es2015-modules-amd.</p>
<h3 id="babel提供的AMD模块转码插件默认开启strict-mode"><a href="#babel提供的AMD模块转码插件默认开启strict-mode" class="headerlink" title="babel提供的AMD模块转码插件默认开启strict mode"></a>babel提供的AMD模块转码插件默认开启strict mode</h3><p>关闭strict mode的方法：</p>
<ul>
<li>不使用<code>preset-es2015</code>，需要<strong>自定义preset</strong>或者在<strong>plugins</strong>中引入所有需要的插件;</li>
<li>插件中做如下配置：</li>
</ul>
<figure class="highlight javascript"><figcaption><span>&#123; .theme-peacock &#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"plugins"</span>: [</div><div class="line">		[<span class="string">"transform-es2015-modules-amd"</span>, &#123;<span class="string">"strict"</span>: <span class="literal">false</span>&#125;]</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <font color="red">Notes：如果不提供es2015相关插件的preset，<code>preset-stage-x</code>也不能使用</font>

<h3 id="es6代码中有require时会导致转码失败"><a href="#es6代码中有require时会导致转码失败" class="headerlink" title="es6代码中有require时会导致转码失败"></a>es6代码中有require时会导致转码失败</h3><p>es6代码中出现<code>require</code>时，babel5能正确转码，但babel6会报如下错误：</p>
<pre><code>Property object of MemberExpression expected node to be of a type [&quot;Expression&quot;] but instead got null.
</code></pre><p>解决方法：使用<code>import</code>。</p>
<h3 id="使用babel-core提供的api转码时，如果以对象形式传入配置，转码后AMD模块会有两层define"><a href="#使用babel-core提供的api转码时，如果以对象形式传入配置，转码后AMD模块会有两层define" class="headerlink" title="使用babel-core提供的api转码时，如果以对象形式传入配置，转码后AMD模块会有两层define"></a>使用babel-core提供的api转码时，如果以对象形式传入配置，转码后AMD模块会有两层<code>define</code></h3><p>解决方法：传入配置中需要增加<code>babelrc=false</code>。<br>可能的原因：babel初始化配置时，如果传入配置中无<code>babelrc=false</code>，会从项目目录中找<strong>.babelrc</strong>文件，然后将传入配置与<strong>.babelrc</strong>配置合并，最终对代码进行两次AMD transfrom。</p>
<h3 id="ES6-module-to-AMD的转码逻辑变更"><a href="#ES6-module-to-AMD的转码逻辑变更" class="headerlink" title="ES6 module to AMD的转码逻辑变更"></a>ES6 module to AMD的转码逻辑变更</h3><p>babel6提供的AMD转码插件对<code>export default</code>的转码逻辑做了修改，详情如下：<br>针对如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export default &#123;</div><div class="line">    foo: 1</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>使用babel5转码后：<br><figure class="highlight javascript"><figcaption><span>&#123; .theme-peacock &#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"exports"</span>, <span class="string">"module"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">exports, module</span>) </span>&#123;</div><div class="line">    <span class="built_in">module</span>.exports = &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="number">1</span></div><div class="line">    &#125;;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用babel6转码后：<br><figure class="highlight javascript"><figcaption><span>&#123; .theme-peacock &#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">"exports"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">exports</span>) </span>&#123;</div><div class="line">    <span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</div><div class="line">        <span class="attr">value</span>: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">    exports.default = &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="number">1</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在AMD模块依赖es6模块的场景下，AMD模块代码会不能运行。</p>
<p>解决方法：<br>方法1. 项目代码全部使用es6;<br>方法2. 修改AMD模块中使用es6模块的方式;<br>方法3. 定义一个模块转码插件，实现babel5的转码逻辑（不是个好办法）。</p>
<figure class="highlight javascript"><figcaption><span>&#123; .theme-peacock &#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foo.js</span></div><div class="line"><span class="keyword">const</span> foo = &#123;<span class="attr">baz</span>: <span class="number">42</span>, <span class="attr">bar</span>: <span class="literal">false</span>&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> foo</div><div class="line"><span class="comment">// bar.js</span></div><div class="line"><span class="keyword">import</span> &#123;baz&#125; <span class="keyword">from</span> <span class="string">'./foo'</span></div></pre></td></tr></table></figure>
<h3 id="polyfill和babel-external-helper"><a href="#polyfill和babel-external-helper" class="headerlink" title="polyfill和babel-external-helper"></a>polyfill和babel-external-helper</h3><p>在babel-polyfill包中。<br>babel-cli提供babel-external-helpers命令，生成helpers代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要升级？&quot;&gt;&lt;a href=&quot;#为什么要升级？&quot; class=&quot;headerlink&quot; title=&quot;为什么要升级？&quot;&gt;&lt;/a&gt;为什么要升级？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;性能提升：据说compile速度提升20%（但测试后发现，速度慢了20%+）。&lt;/li&gt;
    
    </summary>
    
      <category term="开发" scheme="https://hiby.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="es6" scheme="https://hiby.xyz/tags/es6/"/>
    
      <category term="babel6" scheme="https://hiby.xyz/tags/babel6/"/>
    
      <category term="javascript" scheme="https://hiby.xyz/tags/javascript/"/>
    
      <category term="构建" scheme="https://hiby.xyz/tags/%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>文本编辑器</title>
    <link href="https://hiby.xyz/2016/07/06/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://hiby.xyz/2016/07/06/文本编辑器/</id>
    <published>2016-07-06T14:48:55.000Z</published>
    <updated>2017-03-09T08:26:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚跟室友聊一个项目的开发，向他安利了我使用的编辑器和插件。作为一名前端攻城狮、颜值控，不论水平如何，得先把编辑器搞得漂漂亮亮；其次是一些提高开发效率的插件，在此秀一下。</p>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><p>sublime虽然启动快，但是太丑。</p>
<p><img src="/assets/images/atom.png" alt=""></p>
<p>废话不表，推荐一下我用的插件和主题吧。</p>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul>
<li>Theme: <a href="https://github.com/atom-material/atom-material-ui" target="_blank" rel="external">atom-material-ui</a></li>
<li>Syntax: atom-material-syntax<br><img src="https://camo.githubusercontent.com/545d5462428d9da9c99c1fc0cbd82e47488fd690/687474703a2f2f692e696d6775722e636f6d2f457850596d4a592e706e67" alt=""></li>
</ul>
<p>尝试过众多主题，其他的号称material的可以不用看了，这个是最完美的。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="wakatime"><a href="#wakatime" class="headerlink" title="wakatime"></a>wakatime</h3><ul>
<li>推荐级别：🐶🐶🐶🐶🐶</li>
</ul>
<p>自动记录你在项目开发中投入的时间，绝对良心推荐，作为程序猿你值得拥有，支持大多数主流IDE。</p>
<h3 id="sync-settings"><a href="#sync-settings" class="headerlink" title="sync-settings"></a>sync-settings</h3><ul>
<li>推荐级别：🐶🐶🐶🐶🐶</li>
</ul>
<p>同步atom配置利器。</p>
<h3 id="project-manager"><a href="#project-manager" class="headerlink" title="project-manager"></a>project-manager</h3><ul>
<li>推荐级别：🐶🐶🐶🐶🐶</li>
</ul>
<p>项目管理。</p>
<h3 id="file-icons"><a href="#file-icons" class="headerlink" title="file-icons"></a>file-icons</h3><ul>
<li>推荐级别：🐶🐶🐶🐶🐶</li>
</ul>
<p>用了就知道，包爽。</p>
<h3 id="sublime-style-column-selection"><a href="#sublime-style-column-selection" class="headerlink" title="sublime-style-column-selection"></a>sublime-style-column-selection</h3><ul>
<li>推荐级别：🐶🐶🐶🐶🐶</li>
</ul>
<p>纵向选择。</p>
<h3 id="atom-beautify"><a href="#atom-beautify" class="headerlink" title="atom-beautify"></a>atom-beautify</h3><ul>
<li>推荐级别：🐶🐶🐶🐶🐶</li>
</ul>
<h3 id="auto-update-packages"><a href="#auto-update-packages" class="headerlink" title="auto-update-packages"></a>auto-update-packages</h3><ul>
<li>推荐级别：🐶🐶🐶🐶</li>
</ul>
<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git-clone"></a>git-clone</h3><ul>
<li>推荐级别：🐶🐶🐶🐶</li>
</ul>
<h3 id="markdown-writer"><a href="#markdown-writer" class="headerlink" title="markdown-writer"></a>markdown-writer</h3><ul>
<li>推荐级别：🐶🐶🐶🐶</li>
</ul>
<p>写博客还不错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚跟室友聊一个项目的开发，向他安利了我使用的编辑器和插件。作为一名前端攻城狮、颜值控，不论水平如何，得先把编辑器搞得漂漂亮亮；其次是一些提高开发效率的插件，在此秀一下。&lt;/p&gt;
&lt;h2 id=&quot;Atom&quot;&gt;&lt;a href=&quot;#Atom&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="开发" scheme="https://hiby.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Atom" scheme="https://hiby.xyz/tags/Atom/"/>
    
      <category term="文本编辑器" scheme="https://hiby.xyz/tags/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="开发效率" scheme="https://hiby.xyz/tags/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
      <category term="装逼" scheme="https://hiby.xyz/tags/%E8%A3%85%E9%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Hello, blog!</title>
    <link href="https://hiby.xyz/2016/06/25/hello-blog/"/>
    <id>https://hiby.xyz/2016/06/25/hello-blog/</id>
    <published>2016-06-25T06:24:00.000Z</published>
    <updated>2016-07-06T15:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>域名买回来快一年了，自从上次捣鼓blog到现在半年有余，早上一时心血来潮，一口气把这东西整好了。感谢开源主题的同学，我很喜欢Material风格，等有空了自己也贡献一些主题。</p>
<p>大致记录一下建站过程，安装过程、生成blog之类的就不赘述，官网文档灰常清楚，说一些遇到的问题。</p>
<h2 id="Wordpress-or-Hexo？"><a href="#Wordpress-or-Hexo？" class="headerlink" title="Wordpress or Hexo？"></a>Wordpress or Hexo？</h2><p>最早试用了wordpress，发现不好玩，配置太麻烦，偶然间发现hexo，扫了下文档：nodejs驱动，安装、配置、部署简单，然后去尼玛的wordpress。</p>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>官方推荐的安转主题的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> [主题git仓库] themes/xxx</div></pre></td></tr></table></figure></p>
<p>然后问题就来了，用git做版本管理，发现主题目录无法<code>stage</code>，当然也就没办法提交了。</p>
<h3 id="原因和解决方法"><a href="#原因和解决方法" class="headerlink" title="原因和解决方法"></a>原因和解决方法</h3><p><code>git clone</code>下来的目录中有<strong>.git</strong>目录，git认为<strong>xxx</strong>目录为子模块<code>submodule</code>，子模块需要使用<code>git submodule</code>命令操作。对于git不是很熟悉的同学，比如在下，这简直噩梦。时间紧迫，直接跑一下以下命令，然后就可以继续愉快地使用<code>git add/commit</code>了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf themes/xxx/.git</div></pre></td></tr></table></figure>
<h2 id="使用评论插件"><a href="#使用评论插件" class="headerlink" title="使用评论插件"></a>使用评论插件</h2><p>我使用的主题集成<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>，按照主题文档指导，要启用的话需要一个<strong><em>shortname</em>。妈蛋翻遍多说官网，没找到哪里有</strong>shortname**。Google了一下，看到一些问答，说是先建站，然后有个二级域名，二级域名第一个单词啥的。但死活没人给出建站地址，尼玛官网上居然也找不到。不知道翻了多少问答，终于在一个问答的回复的链接中找到了建站链接，真尼玛坑啊。对，就下面这东西，就是它！！！</p>
<p style="font-size: 36px;text-align:center">多说建站链接：<a href="http://duoshuo.com/create-site/" target="_blank" rel="external">http://duoshuo.com/create-site/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;域名买回来快一年了，自从上次捣鼓blog到现在半年有余，早上一时心血来潮，一口气把这东西整好了。感谢开源主题的同学，我很喜欢Material风格，等有空了自己也贡献一些主题。&lt;/p&gt;
&lt;p&gt;大致记录一下建站过程，安装过程、生成blog之类的就不赘述，官网文档灰常清楚，说一些
    
    </summary>
    
      <category term="shit" scheme="https://hiby.xyz/categories/shit/"/>
    
    
      <category term="hexo" scheme="https://hiby.xyz/tags/hexo/"/>
    
      <category term="多说" scheme="https://hiby.xyz/tags/%E5%A4%9A%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>前端Mock工具调研</title>
    <link href="https://hiby.xyz/2014/11/24/mock-investigate/"/>
    <id>https://hiby.xyz/2014/11/24/mock-investigate/</id>
    <published>2014-11-23T16:00:00.000Z</published>
    <updated>2016-07-14T06:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离的开发实践中，mock是一个非常重要的工具。由于前后端开发很难做到同步，前端需要对未完成的接口的响应进行mock；而后端在前端没有完成的情况下，需要构造请求，测试接口的正确性。本文对现有的接口mock工具做了调研，分析其优劣，在最后给出了mock平台的功能设想。</p>
<h2 id="现有的解决方案"><a href="#现有的解决方案" class="headerlink" title="现有的解决方案"></a>现有的解决方案</h2><p>对github上七个比较流行的前端mock工具做了调研，从工具的接入方式、接口的配置、mock数据的构造、mock数据的管理、支持的数据类型、真实响应的模拟等方面对其进行了分析总结。</p>
<h3 id="Jquery-mockjax"><a href="#Jquery-mockjax" class="headerlink" title="Jquery-mockjax"></a><a href="https://github.com/jakerella/jquery-mockjax" target="_blank" rel="external">Jquery-mockjax</a></h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol>
<li><p>接入方式：拦截jquery api发出的ajax请求</p>
</li>
<li><p>接口的配置<br> 通过接口<code>$.mockjax(/* Object */ options)</code>配置请求与mock数据的映射，支持的请求配置方式有：</p>
<ul>
<li><p>通配符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.mockjax(&#123;url: &quot;/data/*&quot;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>正则匹配</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.mockjax(&#123;url: /^\/data\/(quote|tweet)$/i&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.mockjax(&#123;url: &quot;/data/1&quot;&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>根据请求参数动态生成mock配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 通过参数settings可以获取请求url、headers等</div><div class="line">$.mockjax(function(settings)&#123;&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>mock响应数据的构造方式</p>
<p> mockjax的所有响应数据需要通过以下三种方式指定，数据需要手工创建。</p>
<ul>
<li>通过<code>mockjax</code>接口的参数<code>responseText/responseXML</code>指定</li>
<li>通过参数<code>proxy</code>定向到json文件</li>
<li>通过参数<code>response</code>，动态构造或指定数据</li>
</ul>
</li>
<li><p>mock数据管理</p>
<ul>
<li>写死在mock配置中</li>
<li>通过json文件组织，通过参数proxy被使用</li>
</ul>
</li>
<li><p>支持的数据类型：text, html, json, jsonp, script, xml</p>
</li>
<li><p>真实响应的模拟</p>
<ul>
<li>模拟网络延时</li>
<li>指定响应码</li>
<li>指定响应头、支持自定义响应头</li>
<li>模拟服务端超时</li>
</ul>
</li>
<li><p>其他功能</p>
<ul>
<li>通过接口<code>$.mockjaxSetting</code>全局配置</li>
<li>响应完成后的钩子</li>
<li>移除指定mock配置</li>
</ul>
</li>
</ol>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 支持几乎所有的主流浏览器
2. 支持的数据类型较多
3. 可以根据请求参数动态生成不同的响应
4. 配置简单，容易上手
5. 支持自定义响应头
6. 提供`onAfter{Cxxx}`钩子
</code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 所有的mock数据都要手工创建
2. 必须与jquery结合使用，使用场景受到严重限制
3. mock相关的代码侵入项目代码，需要在打包时移除
</code></pre><h3 id="Pretender"><a href="#Pretender" class="headerlink" title="Pretender"></a><a href="https://github.com/trek/pretender" target="_blank" rel="external">Pretender</a></h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ol>
<li><p>接入方式</p>
<p> 替换<code>XMLHttpRequest</code>对象，拦截所有请求，定向到预定义的pretend服务</p>
</li>
<li><p>接口的配置<br> 通过方法<code>get</code>, <code>put</code>, <code>post</code>, <code>delete</code>, <code>patch</code>, <code>head</code>配置path与响应的对应关系，path支持以下两种形式：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.get(&apos;/api/songs/12&apos;, function (request) &#123;&#125;);</div><div class="line"></div><div class="line">this.get(&apos;/api/songs/:song_id&apos;, function (request) &#123;&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>mock响应数据的构造方式</p>
<p> 通过回调指定，响应数据需要手工创建。</p>
</li>
<li><p>mock数据管理：硬编码到代码里。</p>
</li>
<li><p>支持的数据类型：json, text, html</p>
</li>
<li><p>其他功能</p>
<ul>
<li>提供mock响应完成后钩子</li>
<li>支持响应回调中获取query参数</li>
<li>记录处理和未处理的请求数</li>
</ul>
</li>
</ol>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 不依赖项目所使用的js库
2. 配置简单，容易上手
</code></pre><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. path配置比较麻烦，不支持正则和通配符
2. 没有提供从文件获取mock数据的支持
3. 不能模拟异常响应，不能模拟真实网络环境
</code></pre><h3 id="Mockjs"><a href="#Mockjs" class="headerlink" title="Mockjs"></a><a href="https://github.com/nuysoft/Mock" target="_blank" rel="external">Mockjs</a></h3><h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><ol>
<li>接入方式：拦截ajax请求，内置支持jQuery, Zepto, KISSY。</li>
<li>接口的配置：url字符串或正则表达式，请求类型</li>
<li><p>mock响应数据的构造方式</p>
<ul>
<li>根据html模板生成模拟数据</li>
<li>根据数据模板生成自动生成模拟数据</li>
</ul>
</li>
<li><p>mock数据管理</p>
<p> mock数据根据数据模板动态生成，需要管理数据模板。</p>
</li>
<li><p>支持的数据类型：json, text, html</p>
</li>
</ol>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 给出了数据模板定义、数据占位符定义，提供了丰富的语义化的模拟数据生成器
2. 只需定义一份数据模板，即可批量生成模拟数据
</code></pre><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 数据模板定义没有复用机制
2. mock请求、响应配置功能简陋
3. 不支持真实网络环境的模拟
4. 不支持异常响应的模拟
</code></pre><h3 id="APItizer"><a href="#APItizer" class="headerlink" title="APItizer"></a><a href="https://github.com/retro/apitizer" target="_blank" rel="external">APItizer</a></h3><h4 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h4><ol>
<li>接入方式：拦截ajax请求</li>
<li><p>接口的配置</p>
<ul>
<li>调用<code>apitizer.addSchema(&#39;schemaName&#39;, schema)</code>时，apitizer会自动生成restful风格api的mock配置。</li>
<li>可通过<code>apitizer.fixture(&#39;MOTHOD /URL&#39;, function(params) {})</code>进行配置</li>
</ul>
</li>
<li><p>mock响应数据的构造方式</p>
<ul>
<li>根据预定义的json schema生成json数据</li>
<li>可以定制数据生成规则，覆盖默认的生成规则</li>
<li>可以通过回调，响应其他途径获取的数据</li>
</ul>
</li>
<li><p>mock数据管理</p>
<ul>
<li>addSchema后，调用schemaStore(‘schemaName’, number)会自动生成指定条目的<br>数据存入数据库，默认使用数据库中存储的作为mock数据。</li>
<li>可以响应随机生成的mock数据</li>
</ul>
</li>
<li><p>支持的数据类型：json</p>
</li>
<li><p>真实响应的模拟</p>
<ul>
<li>模拟响应延迟</li>
<li>模拟表单更新</li>
<li>模拟列表排序、搜索</li>
<li>模拟异常响应</li>
</ul>
</li>
<li><p>其他功能</p>
<ul>
<li>使用json schema验证后端接口的正确性</li>
<li>支持json schema通过<code>$ref</code>复用</li>
</ul>
</li>
</ol>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 使用json schema自动生成数据，不需要手工创建
2. 支持schema的复用
3. 能够mock表单修改、列表排序和搜索
4. 可以mock随机数据，也可以mock固定数据
5. 对restful api提供原生支持
</code></pre><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 未提供有效的json schema管理方式
2. 对于非restful风格的api支持不是很好
3. 依赖jquery
</code></pre><h3 id="RAP"><a href="#RAP" class="headerlink" title="RAP"></a><a href="https://github.com/thx/RAP" target="_blank" rel="external">RAP</a></h3><h3 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h3><ol>
<li><p>接入方式</p>
<p> 通过rap插件拦截ajax请求，支持KISSY、jquery, 将以下代码写在KISSY或jQuery js代码之后即可:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://&#123;&#123;domainName&#125;&#125;/rap.plugin.js?projectId=&#123;&#123;projectId&#125;&#125;&amp;mode=&#123;&#123;mode&#125;&#125;&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p> 其中：</p>
<ul>
<li>为用户所编辑的接口在RAP中的项目ID</li>
<li><p>为RAP路由的工作模式, 默认值为3。</p>
<p>mode不同值的具体含义如下:</p>
</li>
<li><p>0 不拦截</p>
</li>
<li>1 拦截全部</li>
<li>2 黑名单中的项不拦截</li>
<li>3 仅拦截白名单中的项</li>
</ul>
</li>
<li><p>接口的配置</p>
<ul>
<li>根据接口定义自动生成mock服务</li>
<li>支持黑名单、白名单配置</li>
</ul>
</li>
<li><p>mock响应数据的构造方式</p>
<ul>
<li>根据接口中定义的数据模板自动生成模拟数据</li>
</ul>
</li>
<li><p>mock数据管理</p>
<ul>
<li>接口定义时存储数据模板，不存储具体数据</li>
</ul>
</li>
<li><p>支持的数据类型：json</p>
</li>
<li><p>其他功能</p>
<ul>
<li>提供按项目管理接口的功能</li>
<li>提供接口版本管理的功能</li>
<li>根据接口定义申城接口文档</li>
<li>根据接口定义生成接口的json schema详情</li>
<li>提供多项目见mock模板的复用</li>
<li>支持restful api</li>
</ul>
</li>
</ol>
<h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 根据接口定义自动生成mock服务
2. 根据接口定义中的数据模板自动生成mock数据
3. 由于mock数据是根据接口定义自动生成的，当接口变化时，不需要考虑mock数据修改的问题
4. 黑白名单功能便于在真实后端与mock服务之间切换
</code></pre><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 功能复杂，需要一定的学习成本
2. 只能mock随机数据
3. 接口定义和数据模板复用度低
</code></pre><h3 id="Mocky"><a href="#Mocky" class="headerlink" title="Mocky"></a><a href="https://github.com/studiodev/Mocky" target="_blank" rel="external">Mocky</a></h3><p>待添加</p>
<h3 id="Mockable"><a href="#Mockable" class="headerlink" title="Mockable"></a><a href="">Mockable</a></h3><p>待添加</p>
<h2 id="理想中的mock平台"><a href="#理想中的mock平台" class="headerlink" title="理想中的mock平台"></a>理想中的mock平台</h2><pre><code>1. mock服务能够灵活配置，后端与mock服务之间能够无缝结合，快速切换
2. 数据自动生成，可以是随机数据，也可以是固定数据，并且提供便利的切换方式
3. 当请求参数异常时，能够返回正确的异常信息
4. 当接口发生变化时，不需要修改原有的mock数据
5. 能够mock反例数据，便于自测
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前后端分离的开发实践中，mock是一个非常重要的工具。由于前后端开发很难做到同步，前端需要对未完成的接口的响应进行mock；而后端在前端没有完成的情况下，需要构造请求，测试接口的正确性。本文对现有的接口mock工具做了调研，分析其优劣，在最后给出了mock平台的功能设想。&lt;
    
    </summary>
    
      <category term="开发" scheme="https://hiby.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="https://hiby.xyz/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="mock" scheme="https://hiby.xyz/tags/mock/"/>
    
      <category term="前后端同步开发" scheme="https://hiby.xyz/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%BC%80%E5%8F%91/"/>
    
      <category term="接口模拟" scheme="https://hiby.xyz/tags/%E6%8E%A5%E5%8F%A3%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
</feed>
